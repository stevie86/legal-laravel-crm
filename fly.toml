# fly.toml app configuration file generated by flyctl

app = "beratungs-crm"
primary_region = "fra"

[build]
  # dockerfile = "Dockerfile" # Nur nötig, wenn der Name nicht Dockerfile ist
  # args = { CACHEBUST = "1" } # Kann beim Deploy überschrieben werden

[env]
  # Nicht-sensible Umgebungsvariablen hier
  APP_ENV = "production"
  LOG_CHANNEL = "stderr"
  LOG_LEVEL = "info"
  LOG_STDERR_FORMATTER = "Monolog\\Formatter\\JsonFormatter"
  # Sensible Variablen wie DB_*, MAIL_*, APP_KEY, SESSION_DRIVER, CACHE_STORE, QUEUE_CONNECTION
  # sollten als Fly.io Secrets gesetzt werden! Siehe fly secrets set

[experimental]
  auto_rollback = true

[http_service]
  internal_port = 8080 # Passt zum Dockerfile EXPOSE
  force_https = true
  auto_stop_machines = "stop" # Optional: App stoppen, wenn idle
  auto_start_machines = true # Optional: App starten bei Anfrage
  min_machines_running = 0 # Optional: Mindestanzahl laufender Instanzen

  [http_service.concurrency]
    type = "requests" # Besser für Web-Apps
    soft_limit = 20
    hard_limit = 25

  [[http_service.checks]] # HTTP Health Check
    interval = "15s"
    timeout = "5s"
    method = "GET"
    path = "/status" # Passe den Pfad zu einem Health-Check-Endpoint an (z.B. /healthz)
    grace_period = "5s" # Zeit geben, bis App startet

[deploy]
  release_command = "php artisan migrate --force" # Führt Migrationen vor jedem Deploy aus

# Optional: Volumes für persistenten Storage (z.B. storage/app)
# [[mounts]]
#   source = "storage_vol" # Name des Volumes (fly volumes create storage_vol)
#   destination = "/app/storage" # Pfad im Container

[[statics]] # Statische Assets direkt von Fly.io Edge servieren
  guest_path = "/app/public"
  url_prefix = "/"
  # Optional: Cache-Control Header hinzufügen (nicht direkt hier, sondern über Nginx oder App)